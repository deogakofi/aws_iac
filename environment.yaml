# Give appropriate description to Network Environment
Description: >
    Deoga Kofi / S3NetworkEnvironment Servers

# Set parameter values and defaults for VPC
Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16
    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.2.0/24
    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.0.3.0/24
    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.4.0/24
    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.5.0/24

# Create Resources to setup Network Environments
Resources:
    #Create VPC
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} VPC
    # Create first private subnet
    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    # Create second private subnet
    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    # Create first public subnet
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    # Create second public subnet
    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    # Create first Elastic IP for NAT gateway to access internet
    NATGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: VPCGatewayAttachment
        Properties:
          Domain: vpc
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} NATGateway1EIP

    # Create second Elastic IP for NAT gateway to access internet
    NATGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: VPCGatewayAttachment
        Properties:
          Domain: vpc
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} NATGateway2EIP

    # Create first NAT gateway for private subnet to access internet
    NATGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt NATGateway1EIP.AllocationId
          SubnetId: !Ref PublicSubnet1
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} NATGateway1

    # Create second NAT gateway for private subnet to access internet
    NATGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt NATGateway2EIP.AllocationId
          SubnetId: !Ref PublicSubnet2
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} NATGateway2

    # Create route table for public subnets
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Routes (AZ1)

    # Create Route for public subnets to access the outside world via the InternetGateway
    DefaultPublicRoute1:
        DependsOn: VPCGatewayAttachment
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    # Create Route table assosciation to associate public subnet with public route table
    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    # Create Route table assosciation to associate public subnet with public route table
    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    # Create first route table for private subnets
    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    # Create first route for private route table to connect to NAT gateway
    DefaultPrivateRoute1:
        DependsOn: NATGateway1
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NATGateway1

    # Create association between privatesubnet1 and privateroutetable1
    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    # Create second route table for private subnets
    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    # Create second route for private route table to connect to NAT gateway
    DefaultPrivateRoute2:
        DependsOn: NATGateway2
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NATGateway2

    # Create association between privatesubnet2 and privateroutetable2
    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    # Create internet gateway for NAT gateway to access internet
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} InternetGateway

    # Create VPC gateway for the VPC to attach to an internet gateway
    VPCGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC

# Create outputs for network environment
Outputs:
    # Outputs the VPC ID
    VPC:
        Description: A reference to created VPC
        Value: !Ref VPC
        Export:
          Name: !Sub ${EnvironmentName}-VPCID

    # Outputs the public route table ID
    VPCPublicRouteTable:
        Description: Public Routing
        Value: !Ref PublicRouteTable
        Export:
          Name: !Sub ${EnvironmentName}-PUB-RT

    # Outputs the private route table for privatesubnet1
    VPCPrivateRouteTable1:
        Description: Prive Routing 1 AZ1
        Value: !Ref PrivateRouteTable1
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-RT1

    # Outputs the private route table for privatesubnet2
    VPCPrivateRouteTable2:
        Description: Prive Routing 2
        Value: !Ref PrivateRouteTable2
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-RT2

    # Outputs the values of the public subnet ids as a list
    PublicSubnets:
        Description: List of public subnets
        Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
        Export:
          Name: !Sub ${EnvironmentName}-PUB-NETS

    # Outputs the values of the private subnet ids as a list
    PrivateSubnets:
        Description: List of private subnets
        Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-NETS

    # Outputs the value of the publicsubnet1 id
    PublicSubnet1:
        Description: Reference to the public subnet1 ID
        Value: !Ref PublicSubnet1
        Export:
          Name: !Sub ${EnvironmentName}-PUB-NET1

    # Outputs the value of the publicsubnet2 id
    PublicSubnet2:
        Description: Reference to the public subnet2 ID
        Value: !Ref PublicSubnet2
        Export:
          Name: !Sub ${EnvironmentName}-PUB-NET2

    # Outputs the value of the PrivateSubnet1 id
    PrivateSubnet1:
        Description: Reference to the private subnet1 ID
        Value: !Ref PrivateSubnet1
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-NET1

    # Outputs the value of the publicsubnet2 id
    PrivateSubnet2:
        Description: Reference to the private subnet2 ID
        Value: !Ref PrivateSubnet2
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-NET2

    # Outputs the VpcCIDR ID
    VpcCIDR:
        Description: Reference to the VpcCIDR ID
        Value: !Ref VpcCIDR
        Export:
          Name: !Sub ${EnvironmentName}-VPC-CIDR
